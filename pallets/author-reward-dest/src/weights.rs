
//! Autogenerated weights for `pallet_author_reward_dest`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 35.0.0
//! DATE: 2024-04-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Shawns-MacBook-Pro-M3.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("spec.json")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain=spec.json
// --wasm-execution=compiled
// --pallet=pallet_author_reward_dest
// --extrinsic=*
// --steps=50
// --repeat=20
// --json
// --template
// ../polkadot-sdk/substrate/.maintain/frame-weight-template.hbs
// --output=./pallets/author-reward-dest/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_author_reward_dest`.
pub trait WeightInfo {
	fn set_author_reward_dest() -> Weight;
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `AuthorRewardDest::Author` (r:1 w:1)
	/// Proof: `AuthorRewardDest::Author` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_author_reward_dest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1517`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
